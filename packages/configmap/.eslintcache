[{"C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\App.tsx":"1","C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\reportWebVitals.ts":"2","C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\index.tsx":"3","C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\serviceWorker.ts":"4","C:\\workspace\\grafical-alarm-display-mono\\packages\\configmap\\src\\App.tsx":"5"},{"size":6233,"mtime":1606415879594,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1606148633511,"results":"8","hashOfConfig":"7"},{"size":945,"mtime":1606389176306,"results":"9","hashOfConfig":"7"},{"size":5295,"mtime":1606389161966,"results":"10","hashOfConfig":"7"},{"size":9786,"mtime":1606417086670,"results":"11","hashOfConfig":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"hgrvyu",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"13b7wzc","C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\App.tsx",["24","25","26","27","28"],"C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\reportWebVitals.ts",[],"C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\index.tsx",[],"C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\serviceWorker.ts",[],"C:\\workspace\\grafical-alarm-display-mono\\packages\\configmap\\src\\App.tsx",["29","30","31","32","33","34"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { useDrag, useDrop } from 'react-dnd'\r\n\r\nimport { getEmptyImage } from 'react-dnd-html5-backend';\r\nimport { Select } from '@material-ui/core';\r\nimport Axios from 'axios';\r\n\r\nimport {\r\n    IZone,\r\n    DragLayer,\r\n    DraggableNode\r\n} from '@kimfrost/shared';\r\n\r\nimport './App.scss';\r\n\r\n\r\ninterface INavItemProps {\r\n    id: string,\r\n    type: string,\r\n    active: boolean\r\n}\r\n\r\nconst NavItem: React.FC<INavItemProps> = ({ id, type, active, children }) => {\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { id, type, active, children },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        // end: (item, monitor) => {\r\n        //     const dropResult = monitor.getDropResult();\r\n        //     if (dropResult) {\r\n        //         const { name } = dropResult;\r\n        //         console.log('dropResult', dropResult, item)\r\n        //     }\r\n        // }\r\n    })\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), { captureDraggingState: true })\r\n    }, [])\r\n\r\n    return (\r\n        <div ref={drag}\r\n            className={['app__aside-item', (active ? 'app__aside-item--active' : null)].join(' ')}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst App = () => {\r\n\r\n    const imageRef = useRef<HTMLImageElement>(null);\r\n\r\n    const [points, setPoints] = useState<IZone[]>([]);\r\n\r\n    useEffect(() => {\r\n        const options = {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' },\r\n        }\r\n        fetch('http://localhost:5002/zones', options).then(async (response) => {\r\n            const data = await response.json();\r\n            setPoints(data)\r\n        }).catch((error) => {\r\n            console.error(error)\r\n        })\r\n    }, [])\r\n\r\n    const [{ }, dropTarget] = useDrop({\r\n        accept: ['NAVITEM', 'POINT'],\r\n\r\n        drop: (item: any, monitor) => {\r\n            const delta = monitor.getDifferenceFromInitialOffset(); // mouse delta\r\n            //const initLocalOffset = monitor.getInitialSourceClientOffset(); // point offset when drag started\r\n            const initLocalOffset = monitor.getInitialClientOffset(); // mouse offset when drag started\r\n            //const vPos = monitor.getClientOffset();\r\n            if (imageRef && imageRef.current && delta && initLocalOffset) {\r\n\r\n                const vPos = { x: initLocalOffset.x + delta.x, y: initLocalOffset.y + delta.y }\r\n                const targetRect = imageRef.current.getBoundingClientRect();\r\n                const [x, y] = [vPos.x - targetRect.left, vPos.y - targetRect.top];\r\n\r\n                setPoints(points.map(point => {\r\n                    if (point.Id === item.id) {\r\n                        if (imageRef && imageRef.current) {\r\n                            point.Position = [x / targetRect.width, y / targetRect.height];\r\n                            point.IsActive = true;\r\n\r\n                        }\r\n                    }\r\n                    return point\r\n                }))\r\n                savePoints()\r\n            }\r\n        }\r\n    })\r\n\r\n    const [{ canDrop, isOver }, dropDeleteTarget] = useDrop({\r\n        accept: ['POINT'],\r\n        options: {\r\n\r\n        },\r\n        collect: (monitor) => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        }),\r\n        canDrop: (item, monitor) => {\r\n            return (item.type === 'POINT')\r\n        },\r\n        drop: (item: any, monitor) => {\r\n            //const result = monitor.getDropResult() // should drop handler return result?\r\n            setPoints(points.map(point => {\r\n                if (point.Id === item.id) {\r\n                    point.IsActive = false;\r\n                }\r\n                return point\r\n            }))\r\n            savePoints()\r\n        }\r\n    })\r\n\r\n    const savePoints = () => {\r\n        const options = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(points)\r\n        }\r\n        fetch('http://localhost:5002/zones', options).then(async (response) => {\r\n            const data = await response.json();\r\n            if (!response.ok) {\r\n                const error = (data && data.message) || response.status;\r\n                return Promise.reject(error);\r\n            }\r\n        }).catch((error) => {\r\n            console.error(error)\r\n        })\r\n    }\r\n\r\n    const getFileFromInput = (file: File): Promise<any> => {\r\n        return new Promise(function (resolve, reject) {\r\n            const reader = new FileReader();\r\n            reader.onerror = reject;\r\n            reader.onload = function () { resolve(reader.result); };\r\n            reader.readAsBinaryString(file); // here the file can be read in different way Text, DataUrl, ArrayBuffer\r\n        });\r\n    }\r\n\r\n    const manageUploadedFile = (binary: String, file: File) => {\r\n        console.log(`The file size is ${binary.length}`);\r\n        console.log(`The file name is ${file.name}`);\r\n    }\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"app__body\">\r\n                <div className={[\r\n                    'app__aside',\r\n                    canDrop ? 'app__aside--accept' : null,\r\n                    (canDrop && isOver) ? 'app__aside--drop' : null\r\n                ].join(' ')} ref={dropDeleteTarget}>\r\n                    {points.map((point, index) => (\r\n                        <NavItem\r\n                            key={index}\r\n                            id={point.Id}\r\n                            active={point.IsActive}\r\n                            type=\"NAVITEM\"\r\n                        >\r\n                            {point.Id}\r\n                        </NavItem>\r\n                    ))}\r\n                </div>\r\n                <div className=\"app__controls\">\r\n                    <input type=\"file\" accept=\"image/*\" onChange={(e) => {\r\n                        e.persist();\r\n                        if (e.target && e.target.files) {\r\n                            Array.from(e.target.files).forEach(file => {\r\n\r\n                                const formData = new FormData();\r\n                                formData.append('image', file);\r\n                                Axios.post('http://localhost:5002/upload', formData, {\r\n                                    onUploadProgress: e => {\r\n                                        let progress = Math.round(\r\n                                            e.loaded / e.total * 100) + '%';\r\n                                        console.log('progress', progress)\r\n                                    }\r\n                                }).then(res => {\r\n                                    console.log(res);\r\n                                    // getFile({\r\n                                    //     name: res.data.name,\r\n                                    //     path: 'http://localhost:4500' + res.data.path\r\n                                    // })\r\n                                }).catch(err => console.log(err))\r\n\r\n                                // getFileFromInput(file)\r\n                                //     .then((binary) => manageUploadedFile(binary, file))\r\n                                //     .catch((reason) => {\r\n                                //         console.log(`Error during upload ${reason}`);\r\n                                //         e.target.value = ''; // to allow upload of same file if error occurs\r\n                                //     })\r\n                            });\r\n                        }\r\n\r\n                        // var file = e.target.files[0];\r\n                        // const reader = new FileReader();\r\n                        // var url = reader.readAsDataURL(file);\r\n\r\n                        // reader.onloadend = function (e) {\r\n                        //     this.setState({\r\n                        //         selectedFile: [reader.result]\r\n                        //     });\r\n                        // }.bind(this);\r\n                        // console.log(url); // Would see a path?\r\n\r\n                        // this.setState({\r\n                        //     mainState: \"uploaded\",\r\n                        //     selectedFile: e.target.files[0],\r\n                        //     imageUploaded: 1\r\n                        // });\r\n                    }} />\r\n                    {/* <Select value={selectedLocation} variant=\"outlined\" onChange={(e) => setSelectedLocation(e.target.value as any)}>\r\n                        {locations.map(location => (\r\n                            <MenuItem key={location.Id} value={location as any}>{location.Id}</MenuItem>\r\n                        ))}\r\n                    </Select> */}\r\n                </div>\r\n                <div className=\"app__map\">\r\n                    <div className=\"app__image\" ref={(ref) => {\r\n                        dropTarget(ref);\r\n                    }}>\r\n                        <div\r\n                            className=\"app__points\">\r\n                            {points.map((point, index) => (\r\n                                point.IsActive ?\r\n                                    <DraggableNode key={index} id={point.Id} left={point.Position[0]} top={point.Position[1]}>\r\n                                        <div className=\"point\">{point.Id}</div>\r\n                                    </DraggableNode>\r\n                                    : null\r\n                            ))}\r\n                        </div>\r\n                        <DragLayer />\r\n                        <img src=\"./images/5dd854218135ad200a121f2d232146c8.jpg\" alt=\"\" ref={imageRef} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"35","severity":1,"message":"36","line":1,"column":28,"nodeType":"37","messageId":"38","endLine":1,"endColumn":34},{"ruleId":"35","severity":1,"message":"39","line":2,"column":10,"nodeType":"37","messageId":"38","endLine":2,"endColumn":14},{"ruleId":"40","severity":1,"message":"41","line":44,"column":8,"nodeType":"42","endLine":44,"endColumn":34,"suggestions":"43"},{"ruleId":"40","severity":1,"message":"44","line":61,"column":8,"nodeType":"42","endLine":61,"endColumn":27,"suggestions":"45"},{"ruleId":"46","severity":1,"message":"47","line":88,"column":41,"nodeType":"48","messageId":"49","endLine":88,"endColumn":43},{"ruleId":"35","severity":1,"message":"50","line":5,"column":10,"nodeType":"37","messageId":"38","endLine":5,"endColumn":16},{"ruleId":"35","severity":1,"message":"51","line":24,"column":14,"nodeType":"37","messageId":"38","endLine":24,"endColumn":24},{"ruleId":"40","severity":1,"message":"52","line":40,"column":8,"nodeType":"42","endLine":40,"endColumn":10,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":71,"column":12,"nodeType":"56","messageId":"57","endLine":71,"endColumn":15},{"ruleId":"35","severity":1,"message":"58","line":141,"column":11,"nodeType":"37","messageId":"38","endLine":141,"endColumn":27},{"ruleId":"35","severity":1,"message":"59","line":150,"column":11,"nodeType":"37","messageId":"38","endLine":150,"endColumn":29},"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'atom' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setSelectedLocation'. Either include it or remove the dependency array.","ArrayExpression",["60"],"React Hook useEffect has missing dependencies: 'selectedLocation' and 'setSelectedLocation'. Either include them or remove the dependency array.",["61"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Select' is defined but never used.","'isDragging' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'preview'. Either include it or remove the dependency array.",["62"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'getFileFromInput' is assigned a value but never used.","'manageUploadedFile' is assigned a value but never used.",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [selectedAlarm, locations, setSelectedLocation]",{"range":"69","text":"70"},"Update the dependencies array to be: [alarms, locations, selectedLocation, setSelectedLocation]",{"range":"71","text":"72"},"Update the dependencies array to be: [preview]",{"range":"73","text":"74"},[1293,1319],"[selectedAlarm, locations, setSelectedLocation]",[1960,1979],"[alarms, locations, selectedLocation, setSelectedLocation]",[1101,1103],"[preview]"]