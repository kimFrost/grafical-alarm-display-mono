[{"C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\App.tsx":"1","C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\reportWebVitals.ts":"2","C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\index.tsx":"3","C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\serviceWorker.ts":"4"},{"size":6233,"mtime":1606415879594,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1606148633511,"results":"7","hashOfConfig":"6"},{"size":945,"mtime":1606389176306,"results":"8","hashOfConfig":"6"},{"size":5295,"mtime":1606389161966,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"hgrvyu",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\App.tsx",["19","20","21","22","23"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { atom, useRecoilState } from 'recoil';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport {\r\n    IAlarm,\r\n    ILocation,\r\n    EAlarmType,\r\n    selectedAlarmState,\r\n    selectedLocationState,\r\n    usePrevious,\r\n    useEffectChange,\r\n    Livemap,\r\n    AlarmList\r\n} from '@kimfrost/shared';\r\n\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n\r\n    //console.log('selectedAlarmState', selectedAlarmState)\r\n\r\n    const [selectedAlarm] = useRecoilState(selectedAlarmState);\r\n    const [selectedLocation, setSelectedLocation] = useRecoilState(selectedLocationState);\r\n\r\n    const [locations, setLocations] = useState<ILocation[]>([]);\r\n    const [alarms, setAlarms] = useState<IAlarm[] | null>(null);\r\n\r\n    const [socket, setSocket] = useState<WebSocket | null>(null);\r\n    const prevAlarms = usePrevious(alarms);\r\n\r\n    console.log('new app instance', socket)\r\n\r\n    useEffect(() => {\r\n        if (selectedAlarm) {\r\n            const alarmLocation = locations.find(location => location.Id === selectedAlarm.Location)\r\n            if (alarmLocation) {\r\n                setSelectedLocation(alarmLocation)\r\n            }\r\n        }\r\n    }, [selectedAlarm, locations])\r\n\r\n    useEffect(() => {\r\n        if (!selectedLocation) {\r\n            const mostUrgentAlarm = (alarms && alarms.length) ? (alarms as IAlarm[]).reduce((prev, current) => {\r\n                return (prev.Priority > current.Priority) ? prev : current\r\n            }) : null;\r\n\r\n            let location;\r\n            if (mostUrgentAlarm) {\r\n                location = (locations as ILocation[]).find(location => location.Id === mostUrgentAlarm.Location);\r\n            }\r\n            location = location ? location : locations[0];\r\n            if (location) {\r\n                setSelectedLocation(location);\r\n            }\r\n        }\r\n    }, [alarms, locations])\r\n\r\n    useEffectChange(() => {\r\n        if (prevAlarms) {\r\n            if (alarms !== prevAlarms && alarms && alarms.length > prevAlarms.length) {\r\n                const newAlarms = alarms.filter(alarm => !prevAlarms.some(prevAlarm => alarm.Id === prevAlarm.Id))\r\n                const oldAlarms = alarms.filter(alarm => prevAlarms.some(prevAlarm => alarm.Id === prevAlarm.Id))\r\n                if (newAlarms.length) {\r\n                    const currentHighestPriority = oldAlarms.reduce((prev, current) => {\r\n                        return (current.Priority > prev) ? current.Priority : prev\r\n                    }, -1)\r\n                    const newHighestPriority = newAlarms.reduce((prev, current) => {\r\n                        return (current.Priority > prev) ? current.Priority : prev\r\n                    }, -1)\r\n\r\n                    if (newHighestPriority !== -1 && newHighestPriority > currentHighestPriority) {\r\n                        const mostUrgentAlarm = newAlarms.reduce((prev, current) => {\r\n                            return (current.Priority > prev.Priority) ? current : prev\r\n                        });\r\n                        if (mostUrgentAlarm) {\r\n                            const location = locations.find(location => location.Id === mostUrgentAlarm.Location);\r\n                            if (location) {\r\n                                setSelectedLocation(location);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    newAlarms.map(alarm => {\r\n                        // Trigger sounds \r\n                        if (alarm.Type === EAlarmType.CARDIAC_ARREST) {\r\n                            const audio = new Audio('./sounds/heart_attack.wav');\r\n                            const promise = audio.play();\r\n                            promise.then(() => console.log('audio played'))\r\n                            promise.catch((e) => console.error('audio error', e))\r\n                        }\r\n                    })\r\n                    console.log(\r\n                        'new alarms',\r\n                        JSON.parse(JSON.stringify(newAlarms))\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }, [alarms, prevAlarms])\r\n\r\n    useEffect(() => {\r\n        if (!socket) {\r\n            console.log('new socket')\r\n            setSocket(new WebSocket(\"ws://localhost:5002\"))\r\n        }\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        if (socket) {\r\n            socket.onopen = () => console.log('Conenction established')\r\n            socket.onclose = () => {\r\n                console.log('socket closed ')\r\n                setTimeout(() => {\r\n                    setSocket(null)\r\n                }, 3000)\r\n            }\r\n            socket.onerror = (error) => console.log('Conenction error', error)\r\n            socket.onmessage = (e: MessageEvent) => {\r\n                const event = JSON.parse(e.data);\r\n                const data = event.data;\r\n                ReactDOM.unstable_batchedUpdates(() => {\r\n                    setAlarms(data.alarms);\r\n                    setLocations(data.locations)\r\n                })\r\n            }\r\n            return () => {\r\n                socket.close()\r\n            }\r\n        }\r\n    }, [socket])\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"app__body\">\r\n                <div className=\"app__aside\">\r\n                    <AlarmList alarms={alarms || []} />\r\n                </div>\r\n                <div className=\"app__controls\">\r\n                    <Select value={selectedLocation ? selectedLocation.Id : null} variant=\"outlined\" onChange={(e) => {\r\n                        const location = locations.find(location => location.Id === e.target.value);\r\n                        if (location) {\r\n                            setSelectedLocation(location)\r\n                        }\r\n                    }}>\r\n                        {locations.map(location => (\r\n                            <MenuItem key={location.Id} value={location.Id}>{location.Id}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </div>\r\n                <Livemap alarms={alarms || []} />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\reportWebVitals.ts",[],"C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\index.tsx",[],"C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\serviceWorker.ts",[],{"ruleId":"24","severity":1,"message":"25","line":1,"column":28,"nodeType":"26","messageId":"27","endLine":1,"endColumn":34},{"ruleId":"24","severity":1,"message":"28","line":2,"column":10,"nodeType":"26","messageId":"27","endLine":2,"endColumn":14},{"ruleId":"29","severity":1,"message":"30","line":44,"column":8,"nodeType":"31","endLine":44,"endColumn":34,"suggestions":"32"},{"ruleId":"29","severity":1,"message":"33","line":61,"column":8,"nodeType":"31","endLine":61,"endColumn":27,"suggestions":"34"},{"ruleId":"35","severity":1,"message":"36","line":88,"column":41,"nodeType":"37","messageId":"38","endLine":88,"endColumn":43},"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'atom' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setSelectedLocation'. Either include it or remove the dependency array.","ArrayExpression",["39"],"React Hook useEffect has missing dependencies: 'selectedLocation' and 'setSelectedLocation'. Either include them or remove the dependency array.",["40"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"desc":"41","fix":"42"},{"desc":"43","fix":"44"},"Update the dependencies array to be: [selectedAlarm, locations, setSelectedLocation]",{"range":"45","text":"46"},"Update the dependencies array to be: [alarms, locations, selectedLocation, setSelectedLocation]",{"range":"47","text":"48"},[1293,1319],"[selectedAlarm, locations, setSelectedLocation]",[1960,1979],"[alarms, locations, selectedLocation, setSelectedLocation]"]