[{"C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\App.tsx":"1","C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\reportWebVitals.ts":"2","C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\index.tsx":"3","C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\serviceWorker.ts":"4"},{"size":2379,"mtime":1608278196037,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1606148633511,"results":"7","hashOfConfig":"6"},{"size":1325,"mtime":1608282535474,"results":"8","hashOfConfig":"6"},{"size":5295,"mtime":1606389161966,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"hgrvyu",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\App.tsx",["19","20","21","22"],"import React, { useEffect } from 'react'\r\nimport { atom, useRecoilState } from 'recoil';\r\n\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport {\r\n    Livemap,\r\n    AlarmList,\r\n    useAlarmData,\r\n    useAlarmDataSignalr,\r\n    selectedLocationState,\r\n    selectedAlarmState,\r\n    ILocation,\r\n    IAlarm,\r\n} from '@kimfrost/shared';\r\n\r\nimport './App.scss';\r\n\r\n\r\n\r\nconst App: React.FC = () => {\r\n    //const { alarms, locations } = useAlarmData()\r\n    const { alarms, locations } = useAlarmDataSignalr()\r\n\r\n    const [selectedLocation, setSelectedLocation] = useRecoilState(selectedLocationState);\r\n    const [selectedAlarm] = useRecoilState(selectedAlarmState);\r\n\r\n    useEffect(() => {\r\n        if (!selectedLocation) {\r\n            const mostUrgentAlarm = (alarms && alarms.length) ? (alarms as IAlarm[]).reduce((prev, current) => {\r\n                return (prev.Priority > current.Priority) ? prev : current\r\n            }) : null;\r\n\r\n            let location;\r\n            if (mostUrgentAlarm) {\r\n                location = (locations as ILocation[]).find(location => location.id === mostUrgentAlarm.Location);\r\n            }\r\n            location = location ? location : locations[0];\r\n            if (location) {\r\n                setSelectedLocation(location);\r\n            }\r\n        }\r\n    }, [alarms, locations])\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"app__body\">\r\n                <div className=\"app__aside\">\r\n                    <AlarmList alarms={alarms || []} />\r\n                </div>\r\n                <div className=\"app__controls\">\r\n                    <Select value={selectedLocation ? selectedLocation.id : null} variant=\"outlined\" onChange={(e) => {\r\n                        const location = locations.find(location => location.id === e.target.value);\r\n                        if (location) {\r\n                            setSelectedLocation(location)\r\n                        }\r\n                    }}>\r\n                        {locations.map(location => (\r\n                            <MenuItem key={location.id} value={location.id}>{location.id}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </div>\r\n                <Livemap alarms={alarms || []} />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\reportWebVitals.ts",[],"C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\index.tsx",[],"C:\\workspace\\grafical-alarm-display-mono\\packages\\livemap\\src\\serviceWorker.ts",[],{"ruleId":"23","severity":1,"message":"24","line":2,"column":10,"nodeType":"25","messageId":"26","endLine":2,"endColumn":14},{"ruleId":"23","severity":1,"message":"27","line":10,"column":5,"nodeType":"25","messageId":"26","endLine":10,"endColumn":17},{"ruleId":"23","severity":1,"message":"28","line":27,"column":12,"nodeType":"25","messageId":"26","endLine":27,"endColumn":25},{"ruleId":"29","severity":1,"message":"30","line":44,"column":8,"nodeType":"31","endLine":44,"endColumn":27,"suggestions":"32"},"@typescript-eslint/no-unused-vars","'atom' is defined but never used.","Identifier","unusedVar","'useAlarmData' is defined but never used.","'selectedAlarm' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'selectedLocation' and 'setSelectedLocation'. Either include them or remove the dependency array.","ArrayExpression",["33"],{"desc":"34","fix":"35"},"Update the dependencies array to be: [alarms, locations, selectedLocation, setSelectedLocation]",{"range":"36","text":"37"},[1356,1375],"[alarms, locations, selectedLocation, setSelectedLocation]"]